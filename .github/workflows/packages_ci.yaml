name: "Packages CI"

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

concurrency:
  group: packages-ci-${{ github.event.repository.name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover-packages:
    runs-on: ubuntu-latest
    outputs:
      package_dirs: ${{ steps.get-dirs.outputs.dirs }}
      has_packages: ${{ steps.get-dirs.outputs.has_packages }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      # Get directories and remove the "packages/" prefix for cleaner job names
      - name: Get all package directories
        id: get-dirs
        shell: bash
        run: |
          if [ ! -d "packages" ]; then
            echo "packages directory not found, creating it"
            mkdir -p packages
          fi

          PACKAGE_COUNT=$(find packages -mindepth 1 -maxdepth 1 -type d | wc -l)

          if [ "$PACKAGE_COUNT" -gt 0 ]; then
            echo "Found packages"
            DIRS=$(find packages -mindepth 1 -maxdepth 1 -type d | sed 's/packages\///' | jq -R -s -c 'split("\n")[:-1]')
            HAS_PACKAGES='true'
          else
            echo "No packages found"
            DIRS='[]'
            HAS_PACKAGES='false'
          fi

          echo "has_packages=$HAS_PACKAGES" >> $GITHUB_OUTPUT
          echo "dirs=$DIRS" >> $GITHUB_OUTPUT
          echo "Has packages? $(echo $HAS_PACKAGES)"
          echo "Found directories: $(echo $DIRS)"
  no-packages-found:
    needs: [discover-packages]
    if: needs.discover-packages.outputs.has_packages == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No packages found
        run: |
          echo "No packages found in the packages directory."
          echo "Tests were skipped as there is nothing to test."
  validate-packages:
    needs: [discover-packages]
    runs-on: ubuntu-latest
    if: needs.discover-packages.outputs.has_packages == 'true'
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        package: ${{ fromJson(needs.discover-packages.outputs.package_dirs) }}
        beam-versions:
          - { otp: "27.2", elixir: "1.18.1" }
          - { otp: "26.2", elixir: "1.18.1" }
          - { otp: "27.2", elixir: "1.17.3" }
          - { otp: "26.2", elixir: "1.17.3" }
          - { otp: "26.2", elixir: "1.16.3" }
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        id: beam
        with:
          otp-version: ${{ matrix.beam-versions.otp }}
          elixir-version: ${{ matrix.beam-versions.elixir }}
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: deps-otp-${{ matrix.beam-versions.otp }}-elixir-${{ matrix.beam-versions.elixir }}
        with:
          path: packages/${{ matrix.package }}/deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
      # Step: Define how to cache the `_build` directory. After the first run,
      # this speeds up tests runs a lot. This includes not re-compiling our
      # project's downloaded deps every run.
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: build-otp-${{ matrix.beam-versions.otp }}-elixir-${{ matrix.beam-versions.elixir }}
        with:
          path: packages/${{ matrix.package }}/_build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-
      # Step: Conditionally bust the cache when job is re-run.
      # Sometimes, we may have issues with incremental builds that are fixed by
      # doing a full recompile. In order to not waste dev time on such trivial
      # issues (while also reaping the time savings of incremental builds for
      # *most* day-to-day development), force a full recompile only on builds
      # that are retried.
      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt != '1'
        working-directory: packages/${{ matrix.package }}
        shell: sh
        run: |
          mix deps.clean --all
          mix clean
      - name: Install dependencies
        working-directory: packages/${{ matrix.package }}
        run: mix deps.get
      - name: Check for unused deps
        working-directory: packages/${{ matrix.package }}
        run: mix deps.unlock --check-unused
      - name: Check Formatting
        working-directory: packages/${{ matrix.package }}
        run: mix format --check-formatted
      - name: Compiles without warnings
        working-directory: packages/${{ matrix.package }}
        run: mix compile --warnings-as-errors
      # Step: Start EPMD as a local daemon.
      # When we test stuff that requires adding peers or local distribution,
      # there is sometimes a need for adding EPMD and ensuring that it is running.
      - name: Start EPMD for tests
        run: epmd -daemon
      - name: Run tests
        working-directory: packages/${{ matrix.package }}
        run: mix test
