name: "Packages CI"

on:
  push:
    branches: [main]
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

concurrency:
  group: packages-ci-${{ github.event.repository.name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  discover-packages:
    runs-on: ubuntu-latest
    outputs:
      package_dirs: ${{ steps.get-dirs.outputs.dirs }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      # Get directories and remove the "packages/" prefix for cleaner job names
      - name: Get all package directories
        id: get-dirs
        shell: bash
        run: |
          if [ ! -d "packages" ]; then
            echo "packages directory not found, creating it"
            mkdir -p packages
          fi

          PACKAGE_COUNT=$(find packages -mindepth 1 -maxdepth 1 -type d | wc -l)

          if [ "$PACKAGE_COUNT" -gt 0 ]; then
            echo "Found packages"
            DIRS=$(find packages -mindepth 1 -maxdepth 1 -type d | sed 's/packages\///' | jq -R -s -c 'split("\n")[:-1]')
            HAS_PACKAGES='false'
          else
            echo "No packages found"
            DIRS='[]'
            HAS_PACKAGES='true'
          fi

          echo "has_packages=$HAS_PACKAGES" >> $GITHUB_OUTPUT
          echo "dirs=$DIRS" >> $GITHUB_OUTPUT
          echo "Has packages? $(echo $HAS_PACKAGES)"
          echo "Found directories: $(echo $DIRS)"
  no-packages-found:
    needs: [discover-packages]
    if: needs.discover-packages.outputs.has_packages == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No packages found
        run: |
          echo "No packages found in the packages directory."
          echo "Tests were skipped as there is nothing to test."
  validate-packages:
    needs: [discover-packages]
    runs-on: ubuntu-latest
    if: needs.discover-packages.outputs.has_packages == 'false'
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        package: ${{ fromJson(needs.discover-packages.outputs.package_dirs) }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: LS Working Directory
        working-directory: packages/${{ matrix.package }}
        run: ls
